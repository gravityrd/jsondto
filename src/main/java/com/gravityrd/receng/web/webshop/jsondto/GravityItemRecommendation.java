package com.gravityrd.receng.web.webshop.jsondto;

import com.gravityrd.receng.web.webshop.jsondto.facet.FacetResponse;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.JsonNode;

import java.util.Arrays;
import java.util.Map;

/**
 * The list of items recommended to a user.
 */
@SuppressWarnings({ "WeakerAccess", "unused" })
@JsonIgnoreProperties(ignoreUnknown = true)
public class GravityItemRecommendation {

	/**
	 * The recommendationId is generated by the recommendation engine.  See {@link GravityEvent#recommendationId }.
	 */
	public String recommendationId;

	/**
	 * The list of items. This is populated only if the scenario specifies to do so, otherwise this is null.
	 * The items in this list only have the NameValues specified by the scenario.
	 * The list of NameValues specified by the scenario can be overridden by the {@link GravityRecommendationContext#resultNameValues } on a per request basis.
	 */
	public GravityItem[] items;

	/**
	 * The identifiers of the recommended items.
	 */
	public String[] itemIds;

	/**
	 * The prediction values of the recommended items.
	 */
	public double[] predictionValues;

	/**
	 * Requested meta information for the recommended items.
	 */
	public GravityNameValue[] outputNameValues;

	/**
	 * Facet information for the recommendation request.
	 */
	@JsonInclude(JsonInclude.Include.NON_EMPTY)
	public Map<String, FacetResponse> facets;

	/**
	 * How many recommendations were in the facet set.
	 */
	@JsonInclude(JsonInclude.Include.NON_EMPTY)
	public Long totalResults;

	/**
	 * Aggregation information for the recommendation request.
	 */
	@JsonInclude(JsonInclude.Include.NON_EMPTY)
	public Map<String, JsonNode> elasticAggregations;

	/**
	 * Gravity server side recommendation time.
	 */
	@JsonInclude(JsonInclude.Include.NON_EMPTY)
	public Long took;

	@Override
	public String toString() {
		final StringBuilder sb = new StringBuilder("GravityItemRecommendation{");
		sb.append("recommendationId='").append(recommendationId).append('\'');
		if (items != null && items.length > 0) sb.append(", items=").append(Arrays.toString(items));
		if (itemIds != null && itemIds.length > 0) sb.append(", itemIds=").append(Arrays.toString(itemIds));
		if (predictionValues != null && predictionValues.length > 0) sb.append(", predictionValues=").append(Arrays.toString(predictionValues));
		if (outputNameValues != null && outputNameValues.length > 0) sb.append(", outputNameValues=").append(Arrays.toString(outputNameValues));
		if (facets != null && !facets.isEmpty()) sb.append(", facets=").append(facets);
		if (totalResults != null) sb.append(", totalResults=").append(totalResults);
		if (elasticAggregations != null && !elasticAggregations.isEmpty()) sb.append(", elasticAggregations=").append(elasticAggregations);
		if (took != null) sb.append(", took=").append(took);
		sb.append('}');
		return sb.toString();
	}

	@JsonIgnore
	@SuppressWarnings("unchecked")
	public <F extends FacetResponse> F getFacet(String name) {
		return (F) facets.get(name);
	}
}
